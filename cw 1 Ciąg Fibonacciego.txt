//Rextester.Program.Main is the entry point for your code. Don't change it.
//Compiler version 4.0.30319.17929 for Microsoft (R) .NET Framework 4.5

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace Rextester
{
    public class Program
    {
        public static void Main(string[] args)
        {
            //Your code goes here
            Console.WriteLine("Czesc, Aleksandra!");
            var n = 41;
            var fib = FibRekurencyjnie(n);
            fib = FibIteracyjnie(n);
            
            Console.WriteLine(fib);
            
        }
        
        public static long FibRekurencyjnie(long indeksCiagu)
        {
            if(indeksCiagu == 0)
            {
                return 1;
            }
            if(indeksCiagu == 1)
            {
                return 1;
            }
            var poprzedni = FibRekurencyjnie(indeksCiagu - 1);
            var jeszczePoprzedni = FibRekurencyjnie(indeksCiagu - 2);
            var wynik = poprzedni + jeszczePoprzedni;
            return wynik;
        }
        
        public static long FibRekurencyjnieKrotka(long indeksCiagu)
        {
            return (indeksCiagu == 0) || (indeksCiagu == 1)
                ? 1
                : FibRekurencyjnieKrotka(indeksCiagu - 1) + FibRekurencyjnieKrotka(indeksCiagu - 2);
        }
        
        public static long FibIteracyjnie(long indeks)
        {
            /*
                F_n = (1 / p(5) * ( (1+p(5))/2 )^n * ( (1-p(5))/2 )^n
            */
            double pierwiastekZ5 = Math.Sqrt(5);
            double odwrotnoscPierwiastka = 1 / pierwiastekZ5;
            double pierwszyWspolczynnik = (1 + pierwiastekZ5)/2;
            double drugiWspolczynnik = (1 - pierwiastekZ5)/2;
   
            double wynik = (1 / pierwiastekZ5) * ( Math.Pow(pierwszyWspolczynnik, indeks) - Math.Pow(drugiWspolczynnik, indeks));
            long calkowityWynik = Convert.ToInt64(wynik);
            
            return calkowityWynik;
        } 
    }
}